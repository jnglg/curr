#|SPANISH
Glossary for terminology used in the notes.  The first entry of each entry can be either
a single string or a list of keys that map to the same definition.

If a list of keys is provided, the generated glossary will use the first in the list
when it prints out the glossary for a particular unit
|#

  (("accessor functions" "functions to extract values from a data structure")
    ("apply" "use a given function on some inputs")
    ("arguments" "the inputs to a function; expressions for arguments follow the name of a function")
    ("boolean" "a type of data with two values: true and false")
    (("calling" "calls") "Using a function by giving it inputs")
    ("circle of evaluation" "a diagram of the structure of an expression (arithmetic or code)")
    ("clause" "a question and its corresponding answer in a conditional expression")
    ("conditional" "a code expression made of questions and answers")
    ("constructor" "A function that creates instances of a data structure")
    ("contract" "a statement of the name, domain, and range of a function")
    ("data block" "Code that lists the name, constructor(s), and field(s) of a data structure")
    ("data structure" "A datatype which packages several datatypes as fields")   
    ("data type" "A way of classifying values, such as: Number, String, Image, Boolean, or any user-defined data structure")
    ("datatypes" "A way of classifying values, such as: Number, String, Image, Boolean, or any user-defined data structure")
    ("define" "associate a descriptive name with a value")
    ("definitions area" "the text box in the Editor (DrRacket or WeScheme), where definitions for values and functions are written")
    ("design recipe" "a sequence of steps that helps people document, test, and write functions")
    ("domain" "the type of data that a function expects")
    ("dot-accessors" "A way to extract the values of fields an instance")
    ("editor" "software in which you can write and evaluate code")
    ("error message" "information from the computer about errors in code")
    ("evaluate" "perform the computation in an expression, producing an answer")
    ("evaluates to" "the result of computing an expression")
    ("event-based programming" "a style of programming in which every functions are written to respond to mouse-clicks, keypresses, etc.")
    ("event" "something that happens outside of a running program, which the program can respond to")
    ("example" "shows the use of a function on specific inputs and the computation the function should perform on those inputs")
    ("examples block" "Code that lists examples starting with 'examples:' and ends with 'end'")
    ("expression" "a computation written in the rules of some language (such as arithmetic, code, or a Circle of Evaluation)")
    ("field" "A part of a data structure that has a name and holds a single value of a specified datatype")
    ("function definition" "code that names a function, lists its variables, and states the expression to compute when the function is used")
    ("function block" "code that names a function, lists its variables, and states the expression to compute when the function is used")
    ("function" "a mathematical object that takes in some inputs and produces an output")
    ("handler" "Connects an event (like a tick or keypress) and a function within a reactor")
    ("helper function" "A small function that handles a specific part of another computation, and gets called from other functions")
    ("hypotenuse" "the side opposite the 90-degree angle in a right triangle")
    ("image" "a type of data for pictures")
    ("interactions area" "the text box in the Editor (DrRacket or WeScheme), where we enter expressions to evaluate")
    ("instance" "A specific, packaged value of a data structure that contains other values in its fields.")
    ("legal expression" "code that follows the Code Rules for a language")
    (("library" "libraries") "A collection of functions that can be made available to our program by using include")
    ("mathematical expression" "a computation in arithmetic")
    ("piecewise function" "a function that computes different expressions based on its input")
    ("name" "how we refer to a function or value defined in a language (examples: +, *, star, circle)")
    ("produce" "to compute a value from an expression")
    ("programming language" "a set of reglas for writing code that una computadora can evaluate") 
    ("purpose statement" "a brief description of what a function does")
    ("range" "the type of data that a function produces")
    ("reactor" "A value that contains a current state, and functions for updating, drawing, and interacting with that state")
    ("sample instances" "A collection of single instances, or also used to describe illustrative instances that we use to provide examples of a data structure")
    ("state" "The value of a changing system at any point in time (ie - a stoplight can be in the 'red', 'yellow' or 'green' state). In Pyret, the state of a Reactor is it's current value.")
    ("string" "any sequence of characters between quotation marks (examples: \"hello\", \"42\", \"this is a string!\")")
    ("syntax" "The set of rules that defines a language, whether it be spoken, written, or programmed.")
    ("type" "refers to a general kind of data, like Number, String, Image, or Boolean")
    ("unit test" "an example showing the use of a function with a specific value or values, and the answer it should produce")
    ("value" "a specific piece of data, like 5 or \"hello\"")
    ("variable" "something that changes")
    ("variable name" "name of the information that can be different each time a function is used")
   )
